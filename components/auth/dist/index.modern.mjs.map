{"version":3,"file":"index.modern.mjs","sources":["../src/provider.tsx","../src/components/login-button.tsx","../src/components/success.tsx","../src/components/magic-link-form.tsx","../src/components/password-form.tsx","../src/components/otp-form.tsx","../src/components/provider-button.tsx","../src/components/providers.tsx","../src/components/forgot-password-form.tsx","../src/components/update-password-form.tsx","../src/components/auth-form.tsx","../src/components/auth.tsx"],"sourcesContent":["import * as React from 'react'\n\nconst { createContext, useState, useContext, useEffect, useCallback } = React\n\nimport { usePromise } from '@saas-ui/hooks'\n\nexport type AuthTypeEnum = 'magiclink' | 'password'\n\nexport type AuthActionEnum = 'logIn' | 'signUp'\n\nexport type AuthToken = string | null | undefined\n\nexport interface AuthParams {\n  email?: string\n  password?: string\n  provider?: string\n  refreshToken?: string\n  otp?: string\n  [key: string]: any\n}\n\nexport type ExtraAuthOptions = Record<string, unknown>\nexport type AuthOptions<ExtraOptions extends object = ExtraAuthOptions> = {\n  /**\n   * The url to redirect to after social or magic link login.\n   */\n  redirectTo?: string\n} & ExtraOptions\n\n/**\n * The user object, id is required.\n */\nexport interface User {\n  id: string\n  email?: string\n  [key: string]: any\n}\n\ntype UnsubscribeHandler = () => void\n\nexport type AuthStateChangeCallback<TUser extends User = User> = (\n  user?: TUser | null\n) => void\n\nexport interface AuthProviderProps<TUser extends User = User> {\n  /**\n   * Loads user data after authentication\n   */\n  onLoadUser?: () => Promise<TUser | null>\n  /**\n   * The signup method\n   */\n  onSignup?: (\n    params: AuthParams,\n    options?: AuthOptions\n  ) => Promise<TUser | undefined | null>\n  /**\n   * The login method\n   */\n  onLogin?: (\n    params: AuthParams,\n    options?: AuthOptions\n  ) => Promise<TUser | undefined | null>\n  /**\n   * Request to reset a password.\n   */\n  onResetPassword?: (\n    params: Required<Pick<AuthParams, 'email'>>,\n    options?: AuthOptions\n  ) => Promise<void>\n  /**\n   * Update the password.\n   */\n  onUpdatePassword?: (\n    params: Required<Pick<AuthParams, 'password'>>,\n    options?: AuthOptions\n  ) => Promise<void>\n  /**\n   * Verify an one time password (2fa)\n   */\n  onVerifyOtp?: (\n    params: OtpParams,\n    options?: AuthOptions\n  ) => Promise<boolean | undefined | null>\n  /**\n   * The logout method\n   */\n  onLogout?: (options?: AuthOptions) => Promise<unknown>\n  /**\n   * Should trigger whenever the authentication state changes\n   */\n  onAuthStateChange?: (\n    callback: AuthStateChangeCallback<TUser>\n  ) => UnsubscribeHandler\n  /**\n   * Return the session token\n   */\n  onGetToken?: () => Promise<AuthToken>\n\n  children?: React.ReactNode\n}\n\nexport type AuthFunction<\n  TParams = AuthParams,\n  TExtraOptions extends object = Record<string, unknown>\n> = (params: TParams, options?: AuthOptions<TExtraOptions>) => Promise<any>\n\ninterface OtpParams extends AuthParams {\n  otp: string\n}\n\ntype ResetPasswordParams = Required<Pick<AuthParams, 'email'>>\ntype UpdatePasswordParams = Required<Pick<AuthParams, 'password'>>\n\nexport interface AuthContextValue<TUser extends User = User> {\n  isAuthenticated: boolean\n  isLoggingIn: boolean\n  isLoading: boolean\n  user?: TUser | null\n  signUp: AuthFunction\n  logIn: AuthFunction\n  verifyOtp: AuthFunction<OtpParams>\n  resetPassword: AuthFunction<ResetPasswordParams>\n  updatePassword: AuthFunction<UpdatePasswordParams>\n  logOut: (options?: AuthOptions) => Promise<unknown>\n  loadUser: () => void\n  getToken: () => Promise<AuthToken>\n}\n\nconst createAuthContext = <TUser extends User = User>() => {\n  return createContext<AuthContextValue<TUser> | null>(null)\n}\n\nexport const AuthContext = createAuthContext()\n\nexport const AuthProvider = <TUser extends User = User>({\n  onLoadUser = () => Promise.resolve(null),\n  onSignup = () => Promise.resolve(null),\n  onLogin = () => Promise.resolve(null),\n  onVerifyOtp = () => Promise.resolve(null),\n  onLogout = () => Promise.resolve(),\n  onAuthStateChange,\n  onGetToken,\n  onResetPassword,\n  onUpdatePassword,\n  children,\n}: AuthProviderProps<TUser>) => {\n  const [isAuthenticated, setAuthenticated] = useState(false)\n  const [user, setUser] = useState<TUser | null>()\n  const [isLoading, setLoading] = useState(true)\n\n  useEffect(() => {\n    if (onAuthStateChange) {\n      const unsubscribe = onAuthStateChange((user) => {\n        setAuthenticated(!!user)\n      })\n      return () => {\n        unsubscribe?.()\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    loadUser()\n  }, [isAuthenticated])\n\n  const checkAuth = useCallback(async () => {\n    try {\n      if (onGetToken) {\n        setAuthenticated(!!(await onGetToken()))\n      }\n    } catch (e) {\n      setAuthenticated(false)\n    }\n  }, [onGetToken])\n\n  useEffect(() => {\n    window.addEventListener('focus', checkAuth)\n\n    checkAuth()\n\n    return () => {\n      window.removeEventListener('focus', checkAuth)\n    }\n  }, [checkAuth])\n\n  const loadUser = useCallback(async () => {\n    if (isAuthenticated) {\n      const user = await onLoadUser()\n\n      if (user) {\n        setUser(user)\n      } else {\n        setAuthenticated(false)\n      }\n    }\n\n    setLoading(false)\n  }, [onLoadUser, isAuthenticated])\n\n  const signUp = useCallback(\n    async (params: AuthParams, options?: AuthOptions) => {\n      const result = await onSignup(params, options)\n      checkAuth() // In case the auth service authenticates the user directly.\n      return result\n    },\n    [onSignup]\n  )\n\n  const logIn = useCallback(\n    async (params: AuthParams, options?: AuthOptions) => {\n      const result = await onLogin(params, options)\n      checkAuth() // In case the auth service authenticates the user directly.\n      return result\n    },\n    [onLogin]\n  )\n\n  const logOut = useCallback(async () => {\n    await onLogout()\n    setUser(null)\n    setAuthenticated(false)\n  }, [onLogout])\n\n  const verifyOtp = useCallback(\n    async (params: OtpParams, options?: AuthOptions) => {\n      const result = await onVerifyOtp(params, options)\n      return result\n    },\n    [onVerifyOtp]\n  )\n\n  const resetPassword = useCallback(\n    async (\n      params: Required<Pick<AuthParams, 'email'>>,\n      options?: AuthOptions\n    ) => {\n      await onResetPassword?.(params, options)\n    },\n    [onResetPassword]\n  )\n\n  const updatePassword = useCallback(\n    async (\n      params: Required<Pick<AuthParams, 'password'>>,\n      options?: AuthOptions\n    ) => {\n      await onUpdatePassword?.(params, options)\n    },\n    [onUpdatePassword]\n  )\n\n  const getToken = useCallback(async () => {\n    return onGetToken?.()\n  }, [onGetToken])\n\n  const value: AuthContextValue<TUser> = {\n    isAuthenticated,\n    isLoggingIn: isAuthenticated && !user,\n    isLoading,\n    user,\n    signUp,\n    logIn,\n    logOut,\n    verifyOtp,\n    loadUser,\n    getToken,\n    resetPassword,\n    updatePassword,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nexport const useAuth = <\n  TUser extends User = User\n>(): AuthContextValue<TUser> => {\n  const context = useContext(AuthContext)\n  if (context === null) {\n    throw new Error(\n      'Auth context missing, did you forget to wrap your app in AuthProvider?'\n    )\n  }\n\n  return context as AuthContextValue<TUser>\n}\n\nexport const useCurrentUser = <TUser extends User = User>():\n  | TUser\n  | null\n  | undefined => {\n  return useAuth<TUser>().user\n}\n\nexport interface UseLoginProps {\n  action?: AuthActionEnum\n}\n\nexport const useLogin = ({ action = 'logIn' }: UseLoginProps = {}) => {\n  const auth = useAuth()\n  const fn = auth[action] || auth['logIn']\n  return usePromise<AuthFunction>(fn)\n}\n\nexport const useSignUp = () => {\n  const { signUp } = useAuth()\n  return usePromise(signUp)\n}\n\nexport const useOtp = () => {\n  const { verifyOtp } = useAuth()\n  return usePromise(verifyOtp)\n}\n\nexport const useResetPassword = () => {\n  const { resetPassword } = useAuth()\n  return usePromise(resetPassword)\n}\n\nexport const useUpdatePassword = () => {\n  const { updatePassword } = useAuth()\n  return usePromise(updatePassword)\n}\n","import * as React from 'react'\n\nimport { useTheme } from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\nimport { Button, ButtonProps } from '@saas-ui/button'\n\nexport const LoginButton: React.FC<ButtonProps> = (props) => {\n  const { children, ...rest } = props\n  const theme = useTheme()\n\n  const defaultProps = {\n    p: 6,\n    colorScheme: 'gray',\n    ...theme.components.LoginButton?.defaultProps,\n  }\n\n  return (\n    <Button {...defaultProps} {...rest}>\n      {children}\n    </Button>\n  )\n}\n\nif (__DEV__) {\n  LoginButton.displayName = 'LoginButton'\n}\n","import * as React from 'react'\n\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\n\nexport interface AuthFormSuccessProps {\n  title: React.ReactNode\n  description: React.ReactNode\n}\n\nexport const AuthFormSuccess: React.FC<AuthFormSuccessProps> = ({\n  title,\n  description,\n  ...rest\n}) => {\n  return (\n    <Alert\n      status=\"success\"\n      variant=\"subtle\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      textAlign=\"center\"\n      {...rest}\n    >\n      <AlertIcon boxSize=\"40px\" mr={0} />\n      <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n        {title}\n      </AlertTitle>\n      <AlertDescription maxWidth=\"sm\">{description}</AlertDescription>\n    </Alert>\n  )\n}\n\nif (__DEV__) {\n  AuthFormSuccess.displayName = 'AuthFormSuccess'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormLayout,\n  Field,\n  FormProps,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\nimport { useLogin, AuthActionEnum } from '../provider'\n\nexport interface MagicLinkFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  action?: AuthActionEnum\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  emailLabel?: string\n  defaultValues?: Record<string, any>\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\ninterface SubmitParams {\n  email: string\n  [key: string]: any\n}\n\nexport function MagicLinkSuccess({ email }: any) {\n  const description = (\n    <>\n      {`We've sent a magic link to ${email || 'your email address'}.`}\n      <br />\n      Click on the link to continue.\n    </>\n  )\n\n  return (\n    <AuthFormSuccess title=\"Check your mailbox!\" description={description} />\n  )\n}\n\nif (__DEV__) {\n  MagicLinkSuccess.displayName = 'MagicLinkSuccess'\n}\n\nexport const MagicLinkForm: React.FC<MagicLinkFormProps> = ({\n  action = 'logIn',\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel = 'Continue with Email',\n  emailLabel = 'Email',\n  defaultValues,\n  renderSuccess = (data) => <MagicLinkSuccess email={data?.email} />,\n  children,\n  ...formProps\n}) => {\n  const [{ isLoading, isResolved, data }, submit] = useLogin({\n    action,\n  })\n\n  const handleSubmit: SubmitHandler<SubmitParams> = ({ email }) => {\n    return submit({ email }).then(onSuccess).catch(onError)\n  }\n\n  // Succesful magic link login might not always return data\n  // so we check if the action resolved without errors\n  if (isResolved) {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ email: '', ...defaultValues }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label={emailLabel}\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n\n        {children}\n\n        <LoginButton\n          type=\"submit\"\n          isLoading={isLoading}\n          width=\"full\"\n          label={submitLabel}\n        />\n      </FormLayout>\n    </Form>\n  )\n}\n\nif (__DEV__) {\n  MagicLinkForm.displayName = 'MagicLinkForm'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormProps,\n  FormLayout,\n  Field,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\n\nimport { useLogin, AuthActionEnum } from '../provider'\n\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\ninterface SubmitParams {\n  email: string\n  password: string\n  rememberMe?: boolean\n  [key: string]: any\n}\n\nexport interface PasswordFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  schema?: any\n  action?: AuthActionEnum\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  emailLabel?: string\n  passwordLabel?: string\n  defaultValues?: Record<string, any>\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const PasswordForm: React.FC<PasswordFormProps> = ({\n  action = 'logIn',\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel = 'Log in',\n  emailLabel = 'Email',\n  passwordLabel = 'Password',\n  defaultValues,\n  children,\n  renderSuccess = () => (\n    <AuthFormSuccess\n      title=\"Success!\"\n      description=\"Check your mailbox to verify your account.\"\n    />\n  ),\n  ...formProps\n}) => {\n  const [{ isLoading, isResolved, data }, submit] = useLogin({ action })\n\n  const handleSubmit: SubmitHandler<SubmitParams> = (params) => {\n    return submit(params).then(onSuccess).catch(onError)\n  }\n\n  // Show a default success message on signup.\n  if (isResolved && action === 'signUp') {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ email: '', password: '', ...defaultValues }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label={emailLabel}\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n        <Field\n          name=\"password\"\n          label={passwordLabel}\n          type=\"password\"\n          rules={{ required: true }}\n          autoComplete=\"current-password\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nif (__DEV__) {\n  PasswordForm.displayName = 'PasswordForm'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormLayout,\n  Field,\n  FormProps,\n  SubmitHandler,\n} from '@saas-ui/forms'\n\nimport { useOtp } from '../provider'\n\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\ninterface SubmitParams {\n  otp: string\n  [key: string]: any\n}\n\nexport interface OtpFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  label?: string\n  helpText?: string\n  pinLength?: number\n  onSuccess?: (error: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: any) => void\n  submitLabel?: string\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const OtpForm: React.FC<OtpFormProps> = ({\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel = 'Verify',\n  label,\n  helpText,\n  pinLength = 4,\n  children,\n  renderSuccess = () => (\n    <AuthFormSuccess title=\"Success!\" description=\"You are now logged in.\" />\n  ),\n  ...formProps\n}) => {\n  const [{ isLoading, data }, submit] = useOtp()\n\n  const handleSubmit: SubmitHandler<SubmitParams> = (params) => {\n    return submit(params).then(onSuccess).catch(onError)\n  }\n\n  if (data) {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ otp: '' }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"otp\"\n          label={label}\n          help={helpText}\n          type=\"pin\"\n          pinLength={pinLength}\n          rules={{ required: true }}\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nOtpForm.defaultProps = {\n  helpText:\n    'You can find your one-time password in the Google Authenticator or Authy app.',\n  submitLabel: 'Verify',\n  label: 'Your verification code',\n}\n\nif (__DEV__) {\n  OtpForm.displayName = 'OtpForm'\n}\n","import * as React from 'react'\n\nimport { useTheme } from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport { Button, ButtonProps } from '@saas-ui/button'\n\nexport const ProviderButton: React.FC<ButtonProps> = (props) => {\n  const { children, ...rest } = props\n  const theme = useTheme()\n\n  const defaultProps = {\n    p: 6,\n    variant: 'outline',\n    ...theme.components.ProviderButton?.defaultProps,\n  }\n\n  return (\n    <Button {...defaultProps} {...rest}>\n      {children}\n    </Button>\n  )\n}\n\nif (__DEV__) {\n  ProviderButton.displayName = 'ProviderButton'\n}\n","import * as React from 'react'\n\nimport { SimpleGrid, Icon } from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport { ProviderButton } from './provider-button'\nimport { useAuth } from '../provider'\n\nexport interface Provider {\n  /**\n   * The provider name\n   */\n  name: string\n  /**\n   * The provider icon\n   */\n  icon?: any\n  /**\n   * The provider color\n   */\n  color?: string\n}\n\nexport interface AvailableProviders {\n  [id: string]: Provider\n}\n\nexport interface ProviderProps {\n  providers: AvailableProviders\n  redirectTo?: string\n  label?: string\n}\n\nexport const Providers: React.FC<ProviderProps> = ({\n  providers,\n  redirectTo,\n  label = 'Continue with',\n  ...rest\n}) => {\n  const { logIn } = useAuth()\n\n  if (!providers) {\n    return null\n  }\n\n  const signInWith = (provider: string) => {\n    return async () => {\n      await logIn(\n        { provider },\n        {\n          redirectTo,\n        }\n      )\n    }\n  }\n\n  return (\n    <SimpleGrid spacing={4} {...rest}>\n      {Object.entries(providers).map(([id, provider]) => {\n        const { name, icon, color } = provider\n\n        return (\n          <ProviderButton\n            onClick={signInWith(id)}\n            color={color}\n            leftIcon={icon && <Icon as={icon} />}\n            key={id}\n          >\n            {label} {name}\n          </ProviderButton>\n        )\n      })}\n    </SimpleGrid>\n  )\n}\n\nif (__DEV__) {\n  Providers.displayName = 'Providers'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormLayout,\n  Field,\n  FormProps,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\n\nimport { useResetPassword } from '../provider'\n\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\ninterface SubmitParams {\n  email: string\n  [key: string]: any\n}\n\nexport interface ForgotPasswordFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  /**\n   * @deprecated use emailLabel instead\n   */\n  label?: string\n  emailLabel?: string\n  helpText?: string\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const ForgotPasswordForm: React.FC<ForgotPasswordFormProps> = ({\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel,\n  emailLabel,\n  label,\n  helpText,\n  children,\n  renderSuccess = () => (\n    <AuthFormSuccess\n      title=\"Success!\"\n      description=\"Please check your email for instructions to reset your password.\"\n    />\n  ),\n  ...formProps\n}) => {\n  const [{ isLoading, data }, submit] = useResetPassword()\n\n  const handleSubmit: SubmitHandler<SubmitParams> = (params) => {\n    return submit(params).then(onSuccess).catch(onError)\n  }\n\n  if (data) {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ email: '' }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label={label ?? emailLabel}\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nForgotPasswordForm.defaultProps = {\n  submitLabel: 'Reset password',\n  emailLabel: 'Your email address',\n}\n\nif (__DEV__) {\n  ForgotPasswordForm.displayName = 'ForgotPasswordForm'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormProps,\n  FormLayout,\n  Field,\n  UseFormReturn,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\n\nimport { useUpdatePassword } from '../provider'\n\nimport { LoginButton } from './login-button'\n\ninterface SubmitParams {\n  password: string\n  confirmPassword: string\n  [key: string]: any\n}\n\nexport interface UpdatePasswordFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  /**\n   * @deprecated use passwordLabel instead\n   */\n  label?: string\n  passwordLabel?: string\n  confirmLabel?: string\n  helpText?: string\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const UpdatePasswordForm: React.FC<UpdatePasswordFormProps> = ({\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel,\n  passwordLabel,\n  label,\n  confirmLabel,\n  helpText,\n  children,\n  ...formProps\n}) => {\n  const [{ isLoading }, submit] = useUpdatePassword()\n\n  const formRef = React.useRef<UseFormReturn<SubmitParams>>(null)\n\n  const handleSubmit: SubmitHandler<SubmitParams> = ({ password }) => {\n    return submit({ password }).then(onSuccess).catch(onError)\n  }\n\n  const validatePassword = React.useCallback((confirmPassword: string) => {\n    const password = formRef.current?.getValues('password')\n    return confirmPassword === password\n  }, [])\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ password: '', confirmPassword: '' }}\n      ref={formRef}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"password\"\n          label={label ?? passwordLabel}\n          type=\"password\"\n          rules={{ required: true }}\n          autoComplete=\"current-password\"\n        />\n\n        <Field\n          name=\"confirmPassword\"\n          label={confirmLabel}\n          type=\"password\"\n          rules={{ validate: validatePassword }}\n          autoComplete=\"new-password\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nUpdatePasswordForm.defaultProps = {\n  submitLabel: 'Update password',\n  passwordLabel: 'New password',\n  confirmLabel: 'Confirm password',\n}\n\nif (__DEV__) {\n  UpdatePasswordForm.displayName = 'UpdatePasswordForm'\n}\n","import * as React from 'react'\n\nimport {\n  chakra,\n  HTMLChakraProps,\n  ThemingProps,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n  createStylesContext,\n} from '@chakra-ui/react'\nimport { cx, __DEV__ } from '@chakra-ui/utils'\n\nimport { FormProps, FieldErrors } from '@saas-ui/forms'\nimport { Divider } from '@saas-ui/layout'\n\nimport { MagicLinkForm } from './magic-link-form'\nimport { PasswordForm } from './password-form'\nimport { OtpForm } from './otp-form'\nimport { Providers, AvailableProviders } from './providers'\nimport { AuthTypeEnum, AuthActionEnum } from '../provider'\nimport { ForgotPasswordForm } from './forgot-password-form'\nimport { UpdatePasswordForm } from './update-password-form'\n\nconst [StylesProvider, useStyles] = createStylesContext('AuthForm')\n\nexport interface AuthFormProps\n  extends Omit<\n      FormProps<any>,\n      'defaultValues' | 'onSubmit' | 'onError' | 'title'\n    >,\n    ThemingProps<'AuthForm'> {\n  /**\n   * The authentication type, `magiclink` or `password`\n   */\n  type?: AuthTypeEnum\n  /**\n   * List of OAuth providers\n   */\n  providers?: AvailableProviders\n  /**\n   * The submit action, `logIn` or `signUp`\n   */\n  action?: AuthActionEnum\n  /**\n   * The form title\n   */\n  title?: React.ReactNode\n  /**\n   * Label for the submit button\n   * @default \"Sign in\"\n   */\n  submitLabel?: string\n  /**\n   * Label for the provider buttons\n   * @default \"Continue with\"\n   */\n  providerLabel?: string\n  /**\n   * Label for the divider between oath and the form\n   * @default \"or continue with\"\n   */\n  dividerLabel?: string\n  /**\n   * Children are passed down to the underlying form\n   */\n  children?: React.ReactNode\n  /**\n   * Render custom elements under the submit button\n   */\n  footer?: React.ReactNode\n  /**\n   * Callback executed after succesful login or signup\n   */\n  onSuccess?: (data: any) => void\n  /**\n   * Error handler if login or signup fails\n   */\n  onError?: (error: Error) => void\n  /**\n   * Callback executed when there are validation errors\n   */\n  onValidationError?: (errors: FieldErrors) => void\n}\n\nexport const AuthForm: React.FC<AuthFormProps> = (props) => {\n  const {\n    type,\n    providers,\n    title,\n    providerLabel,\n    dividerLabel,\n    footer,\n    ...formProps\n  } = props\n\n  let form\n  if (type === 'password') {\n    form = <PasswordForm {...formProps} />\n  } else {\n    form = <MagicLinkForm {...formProps} />\n  }\n\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      {providers && (\n        <>\n          <Providers providers={providers} label={providerLabel} />\n          <AuthFormDivider label={dividerLabel} />\n        </>\n      )}\n\n      {form}\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nAuthForm.defaultProps = {\n  type: 'magiclink',\n  providerLabel: 'Continue with',\n  dividerLabel: 'or continue with',\n}\n\nif (__DEV__) {\n  AuthForm.displayName = 'AuthForm'\n}\n\nexport interface AuthFormContainerProps\n  extends HTMLChakraProps<'div'>,\n    ThemingProps<'AuthForm'> {}\n\nexport const AuthFormContainer: React.FC<AuthFormContainerProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig('AuthForm', props)\n\n  const containerProps = omitThemingProps(props)\n\n  const containerStyles: SystemStyleObject = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    width: 'full',\n    ...styles.container,\n  }\n\n  return (\n    <StylesProvider value={styles}>\n      <chakra.div\n        __css={containerStyles}\n        {...containerProps}\n        className={cx('saas-auth-form', props.className)}\n      >\n        {children}\n      </chakra.div>\n    </StylesProvider>\n  )\n}\n\nif (__DEV__) {\n  AuthFormContainer.displayName = 'AuthFormContainer'\n}\n\nexport interface AuthFormDividerProps {\n  label?: string\n}\n\nexport const AuthFormDivider: React.FC<AuthFormDividerProps> = (props) => {\n  const styles = useStyles()\n\n  const dividerStyles = {\n    my: 4,\n    ...styles.divider,\n  }\n\n  return <Divider {...props} sx={dividerStyles} />\n}\n\nexport const AuthFormTitle: React.FC<HTMLChakraProps<'h2'>> = ({\n  children,\n  ...rest\n}) => {\n  const styles = useStyles()\n\n  const titleStyles: SystemStyleObject = {\n    fontSize: '2xl',\n    fontWeight: 'bold',\n    textAlign: 'center',\n    mb: 8,\n    ...styles.title,\n  }\n\n  return (\n    <chakra.h2\n      __css={titleStyles}\n      {...rest}\n      className={cx('saas-auth-form__title', rest.className)}\n    >\n      {children}\n    </chakra.h2>\n  )\n}\n\nif (__DEV__) {\n  AuthFormTitle.displayName = 'AuthFormTitle'\n}\n\nexport const LoginView: React.FC<AuthFormProps> = (props) => {\n  return <AuthForm action=\"logIn\" {...props} />\n}\n\nLoginView.defaultProps = {\n  title: 'Log in',\n  submitLabel: 'Log in',\n}\n\nif (__DEV__) {\n  LoginView.displayName = 'LoginView'\n}\n\nexport const SignupView: React.FC<AuthFormProps> = (props) => {\n  return <AuthForm action=\"signUp\" {...props} />\n}\n\nSignupView.defaultProps = {\n  title: 'Sign up',\n  submitLabel: 'Sign up',\n}\n\nif (__DEV__) {\n  SignupView.displayName = 'SignupView'\n}\n\nexport const OtpView: React.FC<AuthFormProps> = (props) => {\n  const { title, footer, ...rest } = props\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      <OtpForm {...rest} />\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nOtpView.defaultProps = {\n  title: 'One-time password',\n}\n\nif (__DEV__) {\n  OtpView.displayName = 'OtpView'\n}\n\nexport const ForgotPasswordView: React.FC<AuthFormProps> = (props) => {\n  const { title, footer, ...rest } = props\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      <ForgotPasswordForm {...rest} />\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nForgotPasswordView.defaultProps = {\n  title: 'Forgot password',\n}\n\nif (__DEV__) {\n  ForgotPasswordView.displayName = 'ForgotPasswordView'\n}\n\nexport const UpdatePasswordView: React.FC<AuthFormProps> = (props) => {\n  const { title, footer, ...rest } = props\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      <UpdatePasswordForm {...rest} />\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nUpdatePasswordView.defaultProps = {\n  title: 'Choose a new password',\n}\n\nif (__DEV__) {\n  UpdatePasswordView.displayName = 'UpdatePasswordView'\n}\n","import * as React from 'react'\n\nimport { chakra, Link } from '@chakra-ui/react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  LoginView,\n  SignupView,\n  OtpView,\n  ForgotPasswordView,\n  UpdatePasswordView,\n  AuthFormProps,\n} from './auth-form'\n\nimport { AvailableProviders } from '.'\n\nexport const VIEWS = {\n  LOGIN: 'login',\n  SIGNUP: 'signup',\n  FORGOT_PASSWORD: 'forgot_password',\n  UPDATE_PASSWORD: 'update_password',\n  OTP: 'otp',\n}\n\ntype ViewType =\n  | 'login'\n  | 'signup'\n  | 'forgot_password'\n  | 'update_password'\n  | 'otp'\n\nexport interface AuthProps\n  extends Omit<AuthFormProps, 'action' | 'defaultValues' | 'onSubmit'> {\n  /**\n   * Sets the visible authentication form.\n   * Supported views are:\n   * - login\n   * - signup\n   * - forgot_password\n   * - update_password\n   * - otp\n   */\n  view?: ViewType\n  /**\n   * The OAuth providers that are supported.\n   */\n  providers?: AvailableProviders\n  /**\n   * Customize the signup link under the log in form.\n   * @default \"Sign up\"\n   */\n  signupLink?: React.ReactNode\n  /**\n   * Customize the login link under the sign up form.\n   * @default \"Log in\"\n   */\n  loginLink?: React.ReactNode\n  /**\n   * The forgot password link\n   * @default \"Forgot password?\"\n   */\n  forgotLink?: React.ReactNode\n  /**\n   * Back to log in link\n   * @default \"Back to log in\"\n   */\n  backLink?: React.ReactNode\n  /**\n   * Text shown before the signupLink\n   * @default \"No account?\"\n   */\n  noAccount?: React.ReactNode\n  /**\n   * Text shown before the loginLink\n   * @default \"Already have an account?\"\n   */\n  haveAccount?: React.ReactNode\n}\n\nexport const Auth: React.FC<AuthProps> = (props) => {\n  const {\n    view = VIEWS.LOGIN,\n    providers,\n    signupLink,\n    loginLink,\n    forgotLink,\n    backLink,\n    noAccount,\n    haveAccount,\n    ...rest\n  } = props\n\n  const { type } = rest\n\n  const [authView, setAuthView] = React.useState(view)\n\n  React.useEffect(() => {\n    setAuthView(view)\n  }, [view])\n\n  switch (authView) {\n    case VIEWS.LOGIN:\n      return (\n        <LoginView\n          providers={providers}\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.SIGNUP)}\n              label={noAccount}\n              link={signupLink}\n            />\n          }\n          {...rest}\n        >\n          {type === 'password' &&\n            (typeof forgotLink === 'string' ? (\n              <Link\n                fontSize=\"md\"\n                color=\"muted\"\n                float=\"right\"\n                onClick={() => setAuthView(VIEWS.FORGOT_PASSWORD)}\n              >\n                {forgotLink}\n              </Link>\n            ) : (\n              forgotLink\n            ))}\n        </LoginView>\n      )\n    case VIEWS.SIGNUP:\n      return (\n        <SignupView\n          providers={providers}\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.LOGIN)}\n              label={haveAccount}\n              link={loginLink}\n            />\n          }\n          {...rest}\n        ></SignupView>\n      )\n    case VIEWS.FORGOT_PASSWORD:\n      return (\n        <ForgotPasswordView\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.LOGIN)}\n              link={backLink}\n            />\n          }\n          {...rest}\n        />\n      )\n    case VIEWS.UPDATE_PASSWORD:\n      return <UpdatePasswordView {...rest} />\n    case VIEWS.OTP:\n      return <OtpView {...rest} />\n  }\n\n  return null\n}\n\ninterface AuthLinkProps {\n  label?: React.ReactNode\n  link: React.ReactNode\n  onClick: (e: React.MouseEvent) => void\n}\n\nconst AuthLink = ({ label, link, onClick }: AuthLinkProps) => {\n  const styles = {\n    textAlign: 'center',\n    py: 8,\n    fontSize: 'md',\n  }\n  return (\n    <chakra.div __css={styles}>\n      {label && <chakra.span color=\"muted\">{label}</chakra.span>}{' '}\n      {typeof link === 'string' ? <Link onClick={onClick}>{link}</Link> : link}\n    </chakra.div>\n  )\n}\n\nAuth.defaultProps = {\n  noAccount: 'No account yet?',\n  haveAccount: 'Already have an account?',\n  signupLink: 'Sign up',\n  loginLink: 'Log in',\n  forgotLink: 'Forgot password?',\n  backLink: 'Back to log in',\n}\n\nif (__DEV__) {\n  Auth.displayName = 'Auth'\n}\n"],"names":["createContext","useState","useContext","useEffect","useCallback","React","AuthContext","onLoadUser","Promise","resolve","onSignup","onLogin","onVerifyOtp","onLogout","onAuthStateChange","onGetToken","onResetPassword","onUpdatePassword","children","isAuthenticated","setAuthenticated","user","setUser","isLoading","setLoading","unsubscribe","loadUser","checkAuth","async","e","window","addEventListener","removeEventListener","signUp","params","options","result","_onSignup","logOut","resetPassword","getToken","createElement","Provider","value","isLoggingIn","logIn","verifyOtp","updatePassword","useAuth","context","Error","useCurrentUser","useLogin","action","usePromise","auth","useSignUp","useOtp","useResetPassword","useUpdatePassword","_excluded","props","_theme$components$Log","rest","_objectWithoutPropertiesLoose","defaultProps","_extends","p","colorScheme","useTheme","components","LoginButton","Button","__DEV__","displayName","AuthFormSuccess","_ref","title","description","Alert","status","variant","flexDirection","alignItems","justifyContent","textAlign","AlertIcon","boxSize","mr","AlertTitle","mt","mb","fontSize","AlertDescription","maxWidth","MagicLinkSuccess","email","Fragment","MagicLinkForm","onSuccess","onError","onValidationError","submitLabel","emailLabel","defaultValues","renderSuccess","data","formProps","isResolved","submit","Form","onSubmit","then","catch","FormLayout","Field","name","label","type","rules","required","autoComplete","width","PasswordForm","passwordLabel","password","OtpForm","helpText","pinLength","otp","help","_theme$components$Pro","ProviderButton","Providers","providers","redirectTo","signInWith","provider","SimpleGrid","spacing","Object","entries","map","id","icon","color","onClick","leftIcon","Icon","as","key","ForgotPasswordForm","confirmLabel","formRef","useRef","confirmPassword","_formRef$current","current","getValues","ref","validate","validatePassword","UpdatePasswordForm","_excluded2","_excluded3","_excluded4","_excluded5","StylesProvider","useStyles","createStylesContext","providerLabel","dividerLabel","footer","form","AuthFormContainer","AuthFormTitle","AuthFormDivider","AuthForm","useMultiStyleConfig","containerProps","omitThemingProps","containerStyles","display","styles","container","chakra","div","__css","className","cx","dividerStyles","my","divider","Divider","sx","titleStyles","fontWeight","h2","LoginView","SignupView","OtpView","ForgotPasswordView","UpdatePasswordView","VIEWS","LOGIN","SIGNUP","FORGOT_PASSWORD","UPDATE_PASSWORD","OTP","Auth","view","signupLink","loginLink","forgotLink","backLink","noAccount","haveAccount","authView","setAuthView","AuthLink","link","Link","float","py","span"],"mappings":"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"}