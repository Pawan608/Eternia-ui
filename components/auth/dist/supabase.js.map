{"version":3,"file":"supabase.js","sources":["../src/services/supabase.ts"],"sourcesContent":["import {\n  AuthParams,\n  AuthOptions,\n  AuthStateChangeCallback,\n  AuthProviderProps,\n} from '../'\n\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  OAuthResponse,\n  Provider,\n  Session,\n  User,\n  SupabaseClient,\n  VerifyEmailOtpParams,\n  VerifyMobileOtpParams,\n} from '@supabase/supabase-js'\n\ninterface RecoveryParams {\n  access_token?: string\n  refresh_token?: string\n  expires_in?: string\n  token_type?: string\n  type?: string\n}\n\ninterface OtpParams extends AuthParams {\n  otp: string\n}\n\nconst getParams = (): RecoveryParams => {\n  const hash = window.location.hash.replace('#', '')\n  return hash.split('&').reduce<any>((memo, part) => {\n    const [key, value] = part.split('=')\n    memo[key] = value\n    return memo\n  }, {})\n}\n\ninterface SupabaseServiceAuthOptions {\n  loginOptions?: {\n    data?: object\n    /** A URL to send the user to after they are confirmed. */\n    redirectTo?: string\n    /** A space-separated list of scopes granted to the OAuth application. */\n    scopes?: string\n    /** An object of query params */\n    queryParams?: { [key: string]: string }\n\n    /** Verification token received when the user completes the captcha on the site. */\n    captchaToken?: string\n    /** The redirect url embedded in the email link */\n    emailRedirectTo?: string\n    /** If set to false, this method will not create a new user. Defaults to true. */\n    shouldCreateUser?: boolean\n  }\n  signupOptions?: {\n    emailRedirectTo?: string\n    /**\n     * A custom data object to store the user's metadata. This maps to the `auth.users.user_metadata` column.\n     *\n     * The `data` should be a JSON object that includes user-specific info, such as their first and last name.\n     */\n    data?: object\n    /** Verification token received when the user completes the captcha on the site. */\n    captchaToken?: string\n  }\n  verifyOptions?: {\n    /** A URL to send the user to after they are confirmed. */\n    redirectTo?: string\n    /** Verification token received when the user completes the captcha on the site. */\n    captchaToken?: string\n  }\n  resetPasswordOptions?: {\n    redirectTo?: string\n    captchaToken?: string\n  }\n}\n\nexport const createAuthService = (\n  supabase: SupabaseClient<any, 'public', any>,\n  serviceOptions?: SupabaseServiceAuthOptions\n): AuthProviderProps<User> => {\n  const onLogin = async (\n    params: AuthParams,\n    authOptions?: AuthOptions<{ data?: object; captchaToken?: string }>\n  ) => {\n    const options = {\n      ...serviceOptions?.loginOptions,\n      ...authOptions,\n    }\n    function authenticate() {\n      const { email, password, provider, phone } = params\n      if (email && password) {\n        return supabase.auth.signInWithPassword({\n          email,\n          password,\n          options,\n        })\n      } else if (email) {\n        return supabase.auth.signInWithOtp({ email, options })\n      } else if (provider) {\n        return supabase.auth.signInWithOAuth({\n          provider: provider as Provider,\n          options,\n        })\n      } else if (phone && password) {\n        return supabase.auth.signInWithPassword({ phone, password, options })\n      } else if (phone) {\n        return supabase.auth.signInWithOtp({ phone, options })\n      }\n      throw new Error('Could not find correct authentication method')\n    }\n    const resp = await authenticate()\n\n    if (resp.error) {\n      throw resp.error\n    }\n    if (isOauthResponse(resp)) {\n      const userResp = await supabase.auth.getUser()\n      if (userResp.error) {\n        throw userResp.error\n      }\n      return userResp.data.user\n    }\n    return resp.data.user\n  }\n\n  const onSignup = async (\n    params: AuthParams,\n    authOptions?: AuthOptions<{\n      captchaToken?: string\n      emailRedirectTo?: string\n      data?: object\n    }>\n  ) => {\n    async function signup() {\n      const { email, phone, password } = params\n      const options = {\n        ...serviceOptions?.signupOptions,\n        ...authOptions,\n      }\n      if (email && password) {\n        return await supabase.auth.signUp({\n          email,\n          password,\n          options,\n        })\n      } else if (phone && password) {\n        return await supabase.auth.signUp({\n          phone,\n          password,\n          options,\n        })\n      } else if (email) {\n        return supabase.auth.signInWithOtp({ email, options })\n      } else if (phone) {\n        return supabase.auth.signInWithOtp({ phone, options })\n      }\n    }\n\n    const resp = await signup()\n\n    if (resp?.error) {\n      throw resp.error\n    }\n\n    return resp?.data.user\n  }\n\n  const onVerifyOtp = async (\n    params: OtpParams,\n    options?: AuthOptions<{ captchaToken?: string }>\n  ) => {\n    const { email, phone, otp, type } = params\n\n    if (email) {\n      const verify: VerifyEmailOtpParams = {\n        email,\n        token: otp,\n        type: type || 'signup',\n        options: {\n          ...serviceOptions?.verifyOptions,\n          ...options,\n        },\n      }\n      const resp = await supabase.auth.verifyOtp(verify)\n      if (resp.error) {\n        throw resp.error\n      }\n      return Boolean(resp.data.session)\n    }\n\n    if (phone) {\n      const verify: VerifyMobileOtpParams = {\n        phone,\n        token: otp,\n        type: type || 'sms',\n        options: {\n          ...serviceOptions?.verifyOptions,\n          ...options,\n        },\n      }\n      const resp = await supabase.auth.verifyOtp(verify)\n      if (resp.error) {\n        throw resp.error\n      }\n      return Boolean(resp.data.session)\n    }\n\n    throw new Error('You need to provide either email or phone')\n  }\n\n  const onLogout = async () => {\n    return await supabase.auth.signOut()\n  }\n\n  const onAuthStateChange = (callback: AuthStateChangeCallback<User>) => {\n    const { data } = supabase.auth.onAuthStateChange(\n      (event: AuthChangeEvent, session: Session | null) => {\n        callback(session?.user)\n      }\n    )\n\n    return () => data?.subscription.unsubscribe()\n  }\n\n  const onLoadUser = async () => {\n    const { data, error } = await supabase.auth.getUser()\n    if (error) {\n      throw error\n    }\n    return data.user\n  }\n\n  const onGetToken = async () => {\n    const { data, error } = await supabase.auth.getSession()\n    if (error) {\n      throw error\n    }\n    return data.session?.access_token || null\n  }\n\n  const onResetPassword = async (\n    { email }: Required<Pick<AuthParams, 'email'>>,\n    options?: AuthOptions\n  ) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      ...serviceOptions?.resetPasswordOptions,\n      ...options,\n    })\n    if (error) {\n      throw error\n    }\n  }\n\n  const onUpdatePassword = async ({\n    password,\n  }: Required<Pick<AuthParams, 'password'>>) => {\n    const params = getParams()\n\n    if (params?.type === 'recovery') {\n      const { error } = await supabase.auth.updateUser({\n        password,\n      })\n      if (error) {\n        throw error\n      }\n    }\n  }\n\n  return {\n    onLogin,\n    onSignup,\n    onVerifyOtp,\n    onLogout,\n    onAuthStateChange,\n    onLoadUser,\n    onGetToken,\n    onResetPassword,\n    onUpdatePassword,\n  }\n}\n\nfunction isOauthResponse(\n  response: AuthResponse | OAuthResponse\n): response is OAuthResponse {\n  return Boolean((response as OAuthResponse).data?.provider)\n}\n"],"names":["supabase","serviceOptions","onLogin","params","authOptions","options","_extends","loginOptions","Promise","resolve","email","password","provider","phone","auth","signInWithPassword","signInWithOtp","signInWithOAuth","Error","authenticate","resp","_exit","_temp2","_result","data","user","error","isOauthResponse","Boolean","_response$data","getUser","then","userResp","_temp","e","reject","onSignup","signup","signupOptions","signUp","onVerifyOtp","_exit4","_temp7","_result4","_exit3","_temp4","_result5","_temp3","verify","token","otp","type","verifyOptions","verifyOtp","session","_Boolean2","_Boolean","_temp8","onLogout","signOut","onAuthStateChange","callback","event","subscription","unsubscribe","onLoadUser","_ref","onGetToken","getSession","_data$session","access_token","onResetPassword","_ref3","resetPasswordForEmail","resetPasswordOptions","_ref4","onUpdatePassword","window","location","hash","replace","split","reduce","memo","part","_part$split","updateUser"],"mappings":"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"}