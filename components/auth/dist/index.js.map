{"version":3,"file":"index.js","sources":["../src/provider.tsx","../src/components/login-button.tsx","../src/components/success.tsx","../src/components/magic-link-form.tsx","../src/components/password-form.tsx","../src/components/otp-form.tsx","../src/components/provider-button.tsx","../src/components/providers.tsx","../src/components/forgot-password-form.tsx","../src/components/update-password-form.tsx","../src/components/auth-form.tsx","../src/components/auth.tsx"],"sourcesContent":["import * as React from 'react'\n\nconst { createContext, useState, useContext, useEffect, useCallback } = React\n\nimport { usePromise } from '@saas-ui/hooks'\n\nexport type AuthTypeEnum = 'magiclink' | 'password'\n\nexport type AuthActionEnum = 'logIn' | 'signUp'\n\nexport type AuthToken = string | null | undefined\n\nexport interface AuthParams {\n  email?: string\n  password?: string\n  provider?: string\n  refreshToken?: string\n  otp?: string\n  [key: string]: any\n}\n\nexport type ExtraAuthOptions = Record<string, unknown>\nexport type AuthOptions<ExtraOptions extends object = ExtraAuthOptions> = {\n  /**\n   * The url to redirect to after social or magic link login.\n   */\n  redirectTo?: string\n} & ExtraOptions\n\n/**\n * The user object, id is required.\n */\nexport interface User {\n  id: string\n  email?: string\n  [key: string]: any\n}\n\ntype UnsubscribeHandler = () => void\n\nexport type AuthStateChangeCallback<TUser extends User = User> = (\n  user?: TUser | null\n) => void\n\nexport interface AuthProviderProps<TUser extends User = User> {\n  /**\n   * Loads user data after authentication\n   */\n  onLoadUser?: () => Promise<TUser | null>\n  /**\n   * The signup method\n   */\n  onSignup?: (\n    params: AuthParams,\n    options?: AuthOptions\n  ) => Promise<TUser | undefined | null>\n  /**\n   * The login method\n   */\n  onLogin?: (\n    params: AuthParams,\n    options?: AuthOptions\n  ) => Promise<TUser | undefined | null>\n  /**\n   * Request to reset a password.\n   */\n  onResetPassword?: (\n    params: Required<Pick<AuthParams, 'email'>>,\n    options?: AuthOptions\n  ) => Promise<void>\n  /**\n   * Update the password.\n   */\n  onUpdatePassword?: (\n    params: Required<Pick<AuthParams, 'password'>>,\n    options?: AuthOptions\n  ) => Promise<void>\n  /**\n   * Verify an one time password (2fa)\n   */\n  onVerifyOtp?: (\n    params: OtpParams,\n    options?: AuthOptions\n  ) => Promise<boolean | undefined | null>\n  /**\n   * The logout method\n   */\n  onLogout?: (options?: AuthOptions) => Promise<unknown>\n  /**\n   * Should trigger whenever the authentication state changes\n   */\n  onAuthStateChange?: (\n    callback: AuthStateChangeCallback<TUser>\n  ) => UnsubscribeHandler\n  /**\n   * Return the session token\n   */\n  onGetToken?: () => Promise<AuthToken>\n\n  children?: React.ReactNode\n}\n\nexport type AuthFunction<\n  TParams = AuthParams,\n  TExtraOptions extends object = Record<string, unknown>\n> = (params: TParams, options?: AuthOptions<TExtraOptions>) => Promise<any>\n\ninterface OtpParams extends AuthParams {\n  otp: string\n}\n\ntype ResetPasswordParams = Required<Pick<AuthParams, 'email'>>\ntype UpdatePasswordParams = Required<Pick<AuthParams, 'password'>>\n\nexport interface AuthContextValue<TUser extends User = User> {\n  isAuthenticated: boolean\n  isLoggingIn: boolean\n  isLoading: boolean\n  user?: TUser | null\n  signUp: AuthFunction\n  logIn: AuthFunction\n  verifyOtp: AuthFunction<OtpParams>\n  resetPassword: AuthFunction<ResetPasswordParams>\n  updatePassword: AuthFunction<UpdatePasswordParams>\n  logOut: (options?: AuthOptions) => Promise<unknown>\n  loadUser: () => void\n  getToken: () => Promise<AuthToken>\n}\n\nconst createAuthContext = <TUser extends User = User>() => {\n  return createContext<AuthContextValue<TUser> | null>(null)\n}\n\nexport const AuthContext = createAuthContext()\n\nexport const AuthProvider = <TUser extends User = User>({\n  onLoadUser = () => Promise.resolve(null),\n  onSignup = () => Promise.resolve(null),\n  onLogin = () => Promise.resolve(null),\n  onVerifyOtp = () => Promise.resolve(null),\n  onLogout = () => Promise.resolve(),\n  onAuthStateChange,\n  onGetToken,\n  onResetPassword,\n  onUpdatePassword,\n  children,\n}: AuthProviderProps<TUser>) => {\n  const [isAuthenticated, setAuthenticated] = useState(false)\n  const [user, setUser] = useState<TUser | null>()\n  const [isLoading, setLoading] = useState(true)\n\n  useEffect(() => {\n    if (onAuthStateChange) {\n      const unsubscribe = onAuthStateChange((user) => {\n        setAuthenticated(!!user)\n      })\n      return () => {\n        unsubscribe?.()\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    loadUser()\n  }, [isAuthenticated])\n\n  const checkAuth = useCallback(async () => {\n    try {\n      if (onGetToken) {\n        setAuthenticated(!!(await onGetToken()))\n      }\n    } catch (e) {\n      setAuthenticated(false)\n    }\n  }, [onGetToken])\n\n  useEffect(() => {\n    window.addEventListener('focus', checkAuth)\n\n    checkAuth()\n\n    return () => {\n      window.removeEventListener('focus', checkAuth)\n    }\n  }, [checkAuth])\n\n  const loadUser = useCallback(async () => {\n    if (isAuthenticated) {\n      const user = await onLoadUser()\n\n      if (user) {\n        setUser(user)\n      } else {\n        setAuthenticated(false)\n      }\n    }\n\n    setLoading(false)\n  }, [onLoadUser, isAuthenticated])\n\n  const signUp = useCallback(\n    async (params: AuthParams, options?: AuthOptions) => {\n      const result = await onSignup(params, options)\n      checkAuth() // In case the auth service authenticates the user directly.\n      return result\n    },\n    [onSignup]\n  )\n\n  const logIn = useCallback(\n    async (params: AuthParams, options?: AuthOptions) => {\n      const result = await onLogin(params, options)\n      checkAuth() // In case the auth service authenticates the user directly.\n      return result\n    },\n    [onLogin]\n  )\n\n  const logOut = useCallback(async () => {\n    await onLogout()\n    setUser(null)\n    setAuthenticated(false)\n  }, [onLogout])\n\n  const verifyOtp = useCallback(\n    async (params: OtpParams, options?: AuthOptions) => {\n      const result = await onVerifyOtp(params, options)\n      return result\n    },\n    [onVerifyOtp]\n  )\n\n  const resetPassword = useCallback(\n    async (\n      params: Required<Pick<AuthParams, 'email'>>,\n      options?: AuthOptions\n    ) => {\n      await onResetPassword?.(params, options)\n    },\n    [onResetPassword]\n  )\n\n  const updatePassword = useCallback(\n    async (\n      params: Required<Pick<AuthParams, 'password'>>,\n      options?: AuthOptions\n    ) => {\n      await onUpdatePassword?.(params, options)\n    },\n    [onUpdatePassword]\n  )\n\n  const getToken = useCallback(async () => {\n    return onGetToken?.()\n  }, [onGetToken])\n\n  const value: AuthContextValue<TUser> = {\n    isAuthenticated,\n    isLoggingIn: isAuthenticated && !user,\n    isLoading,\n    user,\n    signUp,\n    logIn,\n    logOut,\n    verifyOtp,\n    loadUser,\n    getToken,\n    resetPassword,\n    updatePassword,\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nexport const useAuth = <\n  TUser extends User = User\n>(): AuthContextValue<TUser> => {\n  const context = useContext(AuthContext)\n  if (context === null) {\n    throw new Error(\n      'Auth context missing, did you forget to wrap your app in AuthProvider?'\n    )\n  }\n\n  return context as AuthContextValue<TUser>\n}\n\nexport const useCurrentUser = <TUser extends User = User>():\n  | TUser\n  | null\n  | undefined => {\n  return useAuth<TUser>().user\n}\n\nexport interface UseLoginProps {\n  action?: AuthActionEnum\n}\n\nexport const useLogin = ({ action = 'logIn' }: UseLoginProps = {}) => {\n  const auth = useAuth()\n  const fn = auth[action] || auth['logIn']\n  return usePromise<AuthFunction>(fn)\n}\n\nexport const useSignUp = () => {\n  const { signUp } = useAuth()\n  return usePromise(signUp)\n}\n\nexport const useOtp = () => {\n  const { verifyOtp } = useAuth()\n  return usePromise(verifyOtp)\n}\n\nexport const useResetPassword = () => {\n  const { resetPassword } = useAuth()\n  return usePromise(resetPassword)\n}\n\nexport const useUpdatePassword = () => {\n  const { updatePassword } = useAuth()\n  return usePromise(updatePassword)\n}\n","import * as React from 'react'\n\nimport { useTheme } from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\nimport { Button, ButtonProps } from '@saas-ui/button'\n\nexport const LoginButton: React.FC<ButtonProps> = (props) => {\n  const { children, ...rest } = props\n  const theme = useTheme()\n\n  const defaultProps = {\n    p: 6,\n    colorScheme: 'gray',\n    ...theme.components.LoginButton?.defaultProps,\n  }\n\n  return (\n    <Button {...defaultProps} {...rest}>\n      {children}\n    </Button>\n  )\n}\n\nif (__DEV__) {\n  LoginButton.displayName = 'LoginButton'\n}\n","import * as React from 'react'\n\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\n\nexport interface AuthFormSuccessProps {\n  title: React.ReactNode\n  description: React.ReactNode\n}\n\nexport const AuthFormSuccess: React.FC<AuthFormSuccessProps> = ({\n  title,\n  description,\n  ...rest\n}) => {\n  return (\n    <Alert\n      status=\"success\"\n      variant=\"subtle\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      textAlign=\"center\"\n      {...rest}\n    >\n      <AlertIcon boxSize=\"40px\" mr={0} />\n      <AlertTitle mt={4} mb={1} fontSize=\"lg\">\n        {title}\n      </AlertTitle>\n      <AlertDescription maxWidth=\"sm\">{description}</AlertDescription>\n    </Alert>\n  )\n}\n\nif (__DEV__) {\n  AuthFormSuccess.displayName = 'AuthFormSuccess'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormLayout,\n  Field,\n  FormProps,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\nimport { useLogin, AuthActionEnum } from '../provider'\n\nexport interface MagicLinkFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  action?: AuthActionEnum\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  emailLabel?: string\n  defaultValues?: Record<string, any>\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\ninterface SubmitParams {\n  email: string\n  [key: string]: any\n}\n\nexport function MagicLinkSuccess({ email }: any) {\n  const description = (\n    <>\n      {`We've sent a magic link to ${email || 'your email address'}.`}\n      <br />\n      Click on the link to continue.\n    </>\n  )\n\n  return (\n    <AuthFormSuccess title=\"Check your mailbox!\" description={description} />\n  )\n}\n\nif (__DEV__) {\n  MagicLinkSuccess.displayName = 'MagicLinkSuccess'\n}\n\nexport const MagicLinkForm: React.FC<MagicLinkFormProps> = ({\n  action = 'logIn',\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel = 'Continue with Email',\n  emailLabel = 'Email',\n  defaultValues,\n  renderSuccess = (data) => <MagicLinkSuccess email={data?.email} />,\n  children,\n  ...formProps\n}) => {\n  const [{ isLoading, isResolved, data }, submit] = useLogin({\n    action,\n  })\n\n  const handleSubmit: SubmitHandler<SubmitParams> = ({ email }) => {\n    return submit({ email }).then(onSuccess).catch(onError)\n  }\n\n  // Succesful magic link login might not always return data\n  // so we check if the action resolved without errors\n  if (isResolved) {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ email: '', ...defaultValues }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label={emailLabel}\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n\n        {children}\n\n        <LoginButton\n          type=\"submit\"\n          isLoading={isLoading}\n          width=\"full\"\n          label={submitLabel}\n        />\n      </FormLayout>\n    </Form>\n  )\n}\n\nif (__DEV__) {\n  MagicLinkForm.displayName = 'MagicLinkForm'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormProps,\n  FormLayout,\n  Field,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\n\nimport { useLogin, AuthActionEnum } from '../provider'\n\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\ninterface SubmitParams {\n  email: string\n  password: string\n  rememberMe?: boolean\n  [key: string]: any\n}\n\nexport interface PasswordFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  schema?: any\n  action?: AuthActionEnum\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  emailLabel?: string\n  passwordLabel?: string\n  defaultValues?: Record<string, any>\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const PasswordForm: React.FC<PasswordFormProps> = ({\n  action = 'logIn',\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel = 'Log in',\n  emailLabel = 'Email',\n  passwordLabel = 'Password',\n  defaultValues,\n  children,\n  renderSuccess = () => (\n    <AuthFormSuccess\n      title=\"Success!\"\n      description=\"Check your mailbox to verify your account.\"\n    />\n  ),\n  ...formProps\n}) => {\n  const [{ isLoading, isResolved, data }, submit] = useLogin({ action })\n\n  const handleSubmit: SubmitHandler<SubmitParams> = (params) => {\n    return submit(params).then(onSuccess).catch(onError)\n  }\n\n  // Show a default success message on signup.\n  if (isResolved && action === 'signUp') {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ email: '', password: '', ...defaultValues }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label={emailLabel}\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n        <Field\n          name=\"password\"\n          label={passwordLabel}\n          type=\"password\"\n          rules={{ required: true }}\n          autoComplete=\"current-password\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nif (__DEV__) {\n  PasswordForm.displayName = 'PasswordForm'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormLayout,\n  Field,\n  FormProps,\n  SubmitHandler,\n} from '@saas-ui/forms'\n\nimport { useOtp } from '../provider'\n\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\ninterface SubmitParams {\n  otp: string\n  [key: string]: any\n}\n\nexport interface OtpFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  label?: string\n  helpText?: string\n  pinLength?: number\n  onSuccess?: (error: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: any) => void\n  submitLabel?: string\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const OtpForm: React.FC<OtpFormProps> = ({\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel = 'Verify',\n  label,\n  helpText,\n  pinLength = 4,\n  children,\n  renderSuccess = () => (\n    <AuthFormSuccess title=\"Success!\" description=\"You are now logged in.\" />\n  ),\n  ...formProps\n}) => {\n  const [{ isLoading, data }, submit] = useOtp()\n\n  const handleSubmit: SubmitHandler<SubmitParams> = (params) => {\n    return submit(params).then(onSuccess).catch(onError)\n  }\n\n  if (data) {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ otp: '' }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"otp\"\n          label={label}\n          help={helpText}\n          type=\"pin\"\n          pinLength={pinLength}\n          rules={{ required: true }}\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nOtpForm.defaultProps = {\n  helpText:\n    'You can find your one-time password in the Google Authenticator or Authy app.',\n  submitLabel: 'Verify',\n  label: 'Your verification code',\n}\n\nif (__DEV__) {\n  OtpForm.displayName = 'OtpForm'\n}\n","import * as React from 'react'\n\nimport { useTheme } from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport { Button, ButtonProps } from '@saas-ui/button'\n\nexport const ProviderButton: React.FC<ButtonProps> = (props) => {\n  const { children, ...rest } = props\n  const theme = useTheme()\n\n  const defaultProps = {\n    p: 6,\n    variant: 'outline',\n    ...theme.components.ProviderButton?.defaultProps,\n  }\n\n  return (\n    <Button {...defaultProps} {...rest}>\n      {children}\n    </Button>\n  )\n}\n\nif (__DEV__) {\n  ProviderButton.displayName = 'ProviderButton'\n}\n","import * as React from 'react'\n\nimport { SimpleGrid, Icon } from '@chakra-ui/react'\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport { ProviderButton } from './provider-button'\nimport { useAuth } from '../provider'\n\nexport interface Provider {\n  /**\n   * The provider name\n   */\n  name: string\n  /**\n   * The provider icon\n   */\n  icon?: any\n  /**\n   * The provider color\n   */\n  color?: string\n}\n\nexport interface AvailableProviders {\n  [id: string]: Provider\n}\n\nexport interface ProviderProps {\n  providers: AvailableProviders\n  redirectTo?: string\n  label?: string\n}\n\nexport const Providers: React.FC<ProviderProps> = ({\n  providers,\n  redirectTo,\n  label = 'Continue with',\n  ...rest\n}) => {\n  const { logIn } = useAuth()\n\n  if (!providers) {\n    return null\n  }\n\n  const signInWith = (provider: string) => {\n    return async () => {\n      await logIn(\n        { provider },\n        {\n          redirectTo,\n        }\n      )\n    }\n  }\n\n  return (\n    <SimpleGrid spacing={4} {...rest}>\n      {Object.entries(providers).map(([id, provider]) => {\n        const { name, icon, color } = provider\n\n        return (\n          <ProviderButton\n            onClick={signInWith(id)}\n            color={color}\n            leftIcon={icon && <Icon as={icon} />}\n            key={id}\n          >\n            {label} {name}\n          </ProviderButton>\n        )\n      })}\n    </SimpleGrid>\n  )\n}\n\nif (__DEV__) {\n  Providers.displayName = 'Providers'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormLayout,\n  Field,\n  FormProps,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\n\nimport { useResetPassword } from '../provider'\n\nimport { LoginButton } from './login-button'\n\nimport { AuthFormSuccess } from './success'\n\ninterface SubmitParams {\n  email: string\n  [key: string]: any\n}\n\nexport interface ForgotPasswordFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  /**\n   * @deprecated use emailLabel instead\n   */\n  label?: string\n  emailLabel?: string\n  helpText?: string\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const ForgotPasswordForm: React.FC<ForgotPasswordFormProps> = ({\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel,\n  emailLabel,\n  label,\n  helpText,\n  children,\n  renderSuccess = () => (\n    <AuthFormSuccess\n      title=\"Success!\"\n      description=\"Please check your email for instructions to reset your password.\"\n    />\n  ),\n  ...formProps\n}) => {\n  const [{ isLoading, data }, submit] = useResetPassword()\n\n  const handleSubmit: SubmitHandler<SubmitParams> = (params) => {\n    return submit(params).then(onSuccess).catch(onError)\n  }\n\n  if (data) {\n    return renderSuccess(data)\n  }\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ email: '' }}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"email\"\n          label={label ?? emailLabel}\n          type=\"email\"\n          rules={{ required: true }}\n          autoComplete=\"email\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nForgotPasswordForm.defaultProps = {\n  submitLabel: 'Reset password',\n  emailLabel: 'Your email address',\n}\n\nif (__DEV__) {\n  ForgotPasswordForm.displayName = 'ForgotPasswordForm'\n}\n","import * as React from 'react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  Form,\n  FormProps,\n  FormLayout,\n  Field,\n  UseFormReturn,\n  SubmitHandler,\n  FieldErrors,\n} from '@saas-ui/forms'\n\nimport { useUpdatePassword } from '../provider'\n\nimport { LoginButton } from './login-button'\n\ninterface SubmitParams {\n  password: string\n  confirmPassword: string\n  [key: string]: any\n}\n\nexport interface UpdatePasswordFormProps\n  extends Pick<FormProps<SubmitParams>, 'schema' | 'resolver'> {\n  /**\n   * @deprecated use passwordLabel instead\n   */\n  label?: string\n  passwordLabel?: string\n  confirmLabel?: string\n  helpText?: string\n  onSuccess?: (data: any) => void\n  onError?: (error: any) => void\n  onValidationError?: (error: FieldErrors<SubmitParams>) => void\n  submitLabel?: string\n  renderSuccess?: (data: any) => React.ReactElement\n  children?: React.ReactNode\n}\n\nexport const UpdatePasswordForm: React.FC<UpdatePasswordFormProps> = ({\n  onSuccess = () => null,\n  onError = () => null,\n  onValidationError,\n  submitLabel,\n  passwordLabel,\n  label,\n  confirmLabel,\n  helpText,\n  children,\n  ...formProps\n}) => {\n  const [{ isLoading }, submit] = useUpdatePassword()\n\n  const formRef = React.useRef<UseFormReturn<SubmitParams>>(null)\n\n  const handleSubmit: SubmitHandler<SubmitParams> = ({ password }) => {\n    return submit({ password }).then(onSuccess).catch(onError)\n  }\n\n  const validatePassword = React.useCallback((confirmPassword: string) => {\n    const password = formRef.current?.getValues('password')\n    return confirmPassword === password\n  }, [])\n\n  return (\n    <Form<SubmitParams>\n      onSubmit={handleSubmit}\n      onError={onValidationError}\n      defaultValues={{ password: '', confirmPassword: '' }}\n      ref={formRef}\n      {...formProps}\n    >\n      <FormLayout>\n        <Field\n          name=\"password\"\n          label={label ?? passwordLabel}\n          type=\"password\"\n          rules={{ required: true }}\n          autoComplete=\"current-password\"\n        />\n\n        <Field\n          name=\"confirmPassword\"\n          label={confirmLabel}\n          type=\"password\"\n          rules={{ validate: validatePassword }}\n          autoComplete=\"new-password\"\n        />\n\n        {children}\n\n        <LoginButton type=\"submit\" width=\"full\" isLoading={isLoading}>\n          {submitLabel}\n        </LoginButton>\n      </FormLayout>\n    </Form>\n  )\n}\n\nUpdatePasswordForm.defaultProps = {\n  submitLabel: 'Update password',\n  passwordLabel: 'New password',\n  confirmLabel: 'Confirm password',\n}\n\nif (__DEV__) {\n  UpdatePasswordForm.displayName = 'UpdatePasswordForm'\n}\n","import * as React from 'react'\n\nimport {\n  chakra,\n  HTMLChakraProps,\n  ThemingProps,\n  omitThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n  createStylesContext,\n} from '@chakra-ui/react'\nimport { cx, __DEV__ } from '@chakra-ui/utils'\n\nimport { FormProps, FieldErrors } from '@saas-ui/forms'\nimport { Divider } from '@saas-ui/layout'\n\nimport { MagicLinkForm } from './magic-link-form'\nimport { PasswordForm } from './password-form'\nimport { OtpForm } from './otp-form'\nimport { Providers, AvailableProviders } from './providers'\nimport { AuthTypeEnum, AuthActionEnum } from '../provider'\nimport { ForgotPasswordForm } from './forgot-password-form'\nimport { UpdatePasswordForm } from './update-password-form'\n\nconst [StylesProvider, useStyles] = createStylesContext('AuthForm')\n\nexport interface AuthFormProps\n  extends Omit<\n      FormProps<any>,\n      'defaultValues' | 'onSubmit' | 'onError' | 'title'\n    >,\n    ThemingProps<'AuthForm'> {\n  /**\n   * The authentication type, `magiclink` or `password`\n   */\n  type?: AuthTypeEnum\n  /**\n   * List of OAuth providers\n   */\n  providers?: AvailableProviders\n  /**\n   * The submit action, `logIn` or `signUp`\n   */\n  action?: AuthActionEnum\n  /**\n   * The form title\n   */\n  title?: React.ReactNode\n  /**\n   * Label for the submit button\n   * @default \"Sign in\"\n   */\n  submitLabel?: string\n  /**\n   * Label for the provider buttons\n   * @default \"Continue with\"\n   */\n  providerLabel?: string\n  /**\n   * Label for the divider between oath and the form\n   * @default \"or continue with\"\n   */\n  dividerLabel?: string\n  /**\n   * Children are passed down to the underlying form\n   */\n  children?: React.ReactNode\n  /**\n   * Render custom elements under the submit button\n   */\n  footer?: React.ReactNode\n  /**\n   * Callback executed after succesful login or signup\n   */\n  onSuccess?: (data: any) => void\n  /**\n   * Error handler if login or signup fails\n   */\n  onError?: (error: Error) => void\n  /**\n   * Callback executed when there are validation errors\n   */\n  onValidationError?: (errors: FieldErrors) => void\n}\n\nexport const AuthForm: React.FC<AuthFormProps> = (props) => {\n  const {\n    type,\n    providers,\n    title,\n    providerLabel,\n    dividerLabel,\n    footer,\n    ...formProps\n  } = props\n\n  let form\n  if (type === 'password') {\n    form = <PasswordForm {...formProps} />\n  } else {\n    form = <MagicLinkForm {...formProps} />\n  }\n\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      {providers && (\n        <>\n          <Providers providers={providers} label={providerLabel} />\n          <AuthFormDivider label={dividerLabel} />\n        </>\n      )}\n\n      {form}\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nAuthForm.defaultProps = {\n  type: 'magiclink',\n  providerLabel: 'Continue with',\n  dividerLabel: 'or continue with',\n}\n\nif (__DEV__) {\n  AuthForm.displayName = 'AuthForm'\n}\n\nexport interface AuthFormContainerProps\n  extends HTMLChakraProps<'div'>,\n    ThemingProps<'AuthForm'> {}\n\nexport const AuthFormContainer: React.FC<AuthFormContainerProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig('AuthForm', props)\n\n  const containerProps = omitThemingProps(props)\n\n  const containerStyles: SystemStyleObject = {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    width: 'full',\n    ...styles.container,\n  }\n\n  return (\n    <StylesProvider value={styles}>\n      <chakra.div\n        __css={containerStyles}\n        {...containerProps}\n        className={cx('saas-auth-form', props.className)}\n      >\n        {children}\n      </chakra.div>\n    </StylesProvider>\n  )\n}\n\nif (__DEV__) {\n  AuthFormContainer.displayName = 'AuthFormContainer'\n}\n\nexport interface AuthFormDividerProps {\n  label?: string\n}\n\nexport const AuthFormDivider: React.FC<AuthFormDividerProps> = (props) => {\n  const styles = useStyles()\n\n  const dividerStyles = {\n    my: 4,\n    ...styles.divider,\n  }\n\n  return <Divider {...props} sx={dividerStyles} />\n}\n\nexport const AuthFormTitle: React.FC<HTMLChakraProps<'h2'>> = ({\n  children,\n  ...rest\n}) => {\n  const styles = useStyles()\n\n  const titleStyles: SystemStyleObject = {\n    fontSize: '2xl',\n    fontWeight: 'bold',\n    textAlign: 'center',\n    mb: 8,\n    ...styles.title,\n  }\n\n  return (\n    <chakra.h2\n      __css={titleStyles}\n      {...rest}\n      className={cx('saas-auth-form__title', rest.className)}\n    >\n      {children}\n    </chakra.h2>\n  )\n}\n\nif (__DEV__) {\n  AuthFormTitle.displayName = 'AuthFormTitle'\n}\n\nexport const LoginView: React.FC<AuthFormProps> = (props) => {\n  return <AuthForm action=\"logIn\" {...props} />\n}\n\nLoginView.defaultProps = {\n  title: 'Log in',\n  submitLabel: 'Log in',\n}\n\nif (__DEV__) {\n  LoginView.displayName = 'LoginView'\n}\n\nexport const SignupView: React.FC<AuthFormProps> = (props) => {\n  return <AuthForm action=\"signUp\" {...props} />\n}\n\nSignupView.defaultProps = {\n  title: 'Sign up',\n  submitLabel: 'Sign up',\n}\n\nif (__DEV__) {\n  SignupView.displayName = 'SignupView'\n}\n\nexport const OtpView: React.FC<AuthFormProps> = (props) => {\n  const { title, footer, ...rest } = props\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      <OtpForm {...rest} />\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nOtpView.defaultProps = {\n  title: 'One-time password',\n}\n\nif (__DEV__) {\n  OtpView.displayName = 'OtpView'\n}\n\nexport const ForgotPasswordView: React.FC<AuthFormProps> = (props) => {\n  const { title, footer, ...rest } = props\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      <ForgotPasswordForm {...rest} />\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nForgotPasswordView.defaultProps = {\n  title: 'Forgot password',\n}\n\nif (__DEV__) {\n  ForgotPasswordView.displayName = 'ForgotPasswordView'\n}\n\nexport const UpdatePasswordView: React.FC<AuthFormProps> = (props) => {\n  const { title, footer, ...rest } = props\n  return (\n    <AuthFormContainer>\n      {typeof title === 'string' ? (\n        <AuthFormTitle>{title}</AuthFormTitle>\n      ) : (\n        title\n      )}\n      <UpdatePasswordForm {...rest} />\n\n      {footer}\n    </AuthFormContainer>\n  )\n}\n\nUpdatePasswordView.defaultProps = {\n  title: 'Choose a new password',\n}\n\nif (__DEV__) {\n  UpdatePasswordView.displayName = 'UpdatePasswordView'\n}\n","import * as React from 'react'\n\nimport { chakra, Link } from '@chakra-ui/react'\n\nimport { __DEV__ } from '@chakra-ui/utils'\n\nimport {\n  LoginView,\n  SignupView,\n  OtpView,\n  ForgotPasswordView,\n  UpdatePasswordView,\n  AuthFormProps,\n} from './auth-form'\n\nimport { AvailableProviders } from '.'\n\nexport const VIEWS = {\n  LOGIN: 'login',\n  SIGNUP: 'signup',\n  FORGOT_PASSWORD: 'forgot_password',\n  UPDATE_PASSWORD: 'update_password',\n  OTP: 'otp',\n}\n\ntype ViewType =\n  | 'login'\n  | 'signup'\n  | 'forgot_password'\n  | 'update_password'\n  | 'otp'\n\nexport interface AuthProps\n  extends Omit<AuthFormProps, 'action' | 'defaultValues' | 'onSubmit'> {\n  /**\n   * Sets the visible authentication form.\n   * Supported views are:\n   * - login\n   * - signup\n   * - forgot_password\n   * - update_password\n   * - otp\n   */\n  view?: ViewType\n  /**\n   * The OAuth providers that are supported.\n   */\n  providers?: AvailableProviders\n  /**\n   * Customize the signup link under the log in form.\n   * @default \"Sign up\"\n   */\n  signupLink?: React.ReactNode\n  /**\n   * Customize the login link under the sign up form.\n   * @default \"Log in\"\n   */\n  loginLink?: React.ReactNode\n  /**\n   * The forgot password link\n   * @default \"Forgot password?\"\n   */\n  forgotLink?: React.ReactNode\n  /**\n   * Back to log in link\n   * @default \"Back to log in\"\n   */\n  backLink?: React.ReactNode\n  /**\n   * Text shown before the signupLink\n   * @default \"No account?\"\n   */\n  noAccount?: React.ReactNode\n  /**\n   * Text shown before the loginLink\n   * @default \"Already have an account?\"\n   */\n  haveAccount?: React.ReactNode\n}\n\nexport const Auth: React.FC<AuthProps> = (props) => {\n  const {\n    view = VIEWS.LOGIN,\n    providers,\n    signupLink,\n    loginLink,\n    forgotLink,\n    backLink,\n    noAccount,\n    haveAccount,\n    ...rest\n  } = props\n\n  const { type } = rest\n\n  const [authView, setAuthView] = React.useState(view)\n\n  React.useEffect(() => {\n    setAuthView(view)\n  }, [view])\n\n  switch (authView) {\n    case VIEWS.LOGIN:\n      return (\n        <LoginView\n          providers={providers}\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.SIGNUP)}\n              label={noAccount}\n              link={signupLink}\n            />\n          }\n          {...rest}\n        >\n          {type === 'password' &&\n            (typeof forgotLink === 'string' ? (\n              <Link\n                fontSize=\"md\"\n                color=\"muted\"\n                float=\"right\"\n                onClick={() => setAuthView(VIEWS.FORGOT_PASSWORD)}\n              >\n                {forgotLink}\n              </Link>\n            ) : (\n              forgotLink\n            ))}\n        </LoginView>\n      )\n    case VIEWS.SIGNUP:\n      return (\n        <SignupView\n          providers={providers}\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.LOGIN)}\n              label={haveAccount}\n              link={loginLink}\n            />\n          }\n          {...rest}\n        ></SignupView>\n      )\n    case VIEWS.FORGOT_PASSWORD:\n      return (\n        <ForgotPasswordView\n          footer={\n            <AuthLink\n              onClick={() => setAuthView(VIEWS.LOGIN)}\n              link={backLink}\n            />\n          }\n          {...rest}\n        />\n      )\n    case VIEWS.UPDATE_PASSWORD:\n      return <UpdatePasswordView {...rest} />\n    case VIEWS.OTP:\n      return <OtpView {...rest} />\n  }\n\n  return null\n}\n\ninterface AuthLinkProps {\n  label?: React.ReactNode\n  link: React.ReactNode\n  onClick: (e: React.MouseEvent) => void\n}\n\nconst AuthLink = ({ label, link, onClick }: AuthLinkProps) => {\n  const styles = {\n    textAlign: 'center',\n    py: 8,\n    fontSize: 'md',\n  }\n  return (\n    <chakra.div __css={styles}>\n      {label && <chakra.span color=\"muted\">{label}</chakra.span>}{' '}\n      {typeof link === 'string' ? <Link onClick={onClick}>{link}</Link> : link}\n    </chakra.div>\n  )\n}\n\nAuth.defaultProps = {\n  noAccount: 'No account yet?',\n  haveAccount: 'Already have an account?',\n  signupLink: 'Sign up',\n  loginLink: 'Log in',\n  forgotLink: 'Forgot password?',\n  backLink: 'Back to log in',\n}\n\nif (__DEV__) {\n  Auth.displayName = 'Auth'\n}\n"],"names":["useState","React","useContext","useEffect","useCallback","AuthContext","createContext","useAuth","context","Error","useLogin","_temp6","_ref2$action","action","auth","useOtp","usePromise","verifyOtp","useResetPassword","resetPassword","useUpdatePassword","updatePassword","_excluded","LoginButton","props","children","rest","defaultProps","p","colorScheme","_theme$components$Log","useTheme","components","Button","_extends","__DEV__","displayName","AuthFormSuccess","_ref","title","description","_objectWithoutPropertiesLoose","createElement","Alert","status","variant","flexDirection","alignItems","justifyContent","textAlign","AlertIcon","boxSize","mr","AlertTitle","mt","mb","fontSize","AlertDescription","maxWidth","MagicLinkSuccess","Fragment","email","MagicLinkForm","_ref2","onSuccess","_ref2$onSuccess","_ref2$onError","onError","onValidationError","submitLabel","_ref2$submitLabel","_ref2$emailLabel","emailLabel","defaultValues","_ref2$renderSuccess","renderSuccess","data","formProps","isLoading","submit","_useLogin","_useLogin$","isResolved","Form","onSubmit","_ref3","then","FormLayout","Field","name","label","type","rules","required","autoComplete","width","PasswordForm","_ref$action","_ref$onSuccess","_ref$onError","_ref$submitLabel","_ref$emailLabel","_ref$passwordLabel","passwordLabel","_ref$renderSuccess","params","password","OtpForm","helpText","pinLength","_ref$pinLength","_useOtp$","_useOtp","otp","help","ProviderButton","_theme$components$Pro","Providers","providers","redirectTo","_ref$label","logIn","signInWith","provider","e","Promise","reject","SimpleGrid","spacing","Object","entries","map","id","icon","color","onClick","leftIcon","Icon","as","key","ForgotPasswordForm","_useResetPassword","UpdatePasswordForm","confirmLabel","_useUpdatePassword","formRef","useRef","validatePassword","confirmPassword","_formRef$current","current","getValues","ref","validate","_excluded2","_excluded3","_excluded4","_excluded5","createStylesContext","StylesProvider","_createStylesContext","useStyles","AuthForm","form","providerLabel","dividerLabel","footer","AuthFormContainer","AuthFormTitle","AuthFormDivider","styles","useMultiStyleConfig","containerProps","omitThemingProps","containerStyles","display","container","value","chakra","div","__css","className","cx","dividerStyles","my","divider","Divider","sx","titleStyles","fontWeight","h2","LoginView","SignupView","OtpView","ForgotPasswordView","UpdatePasswordView","VIEWS","LOGIN","SIGNUP","FORGOT_PASSWORD","UPDATE_PASSWORD","OTP","Auth","view","_props$view","signupLink","loginLink","forgotLink","backLink","noAccount","haveAccount","authView","_React$useState","setAuthView","AuthLink","link","Link","float","py","span","onLoadUser","_ref$onLoadUser","resolve","onSignup","_ref$onSignup","_ref$onLogin","onLogin","onVerifyOtp","_ref$onVerifyOtp","onLogout","_ref$onLogout","onAuthStateChange","onGetToken","onResetPassword","onUpdatePassword","_useState","isAuthenticated","setAuthenticated","_useState2","user","setUser","_useState3","setLoading","unsubscribe","loadUser","checkAuth","_temp","_onGetToken","_catch","window","addEventListener","removeEventListener","_temp5","_temp4","signUp","options","result","logOut","getToken","Provider","isLoggingIn","_useAuth"],"mappings":"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"}