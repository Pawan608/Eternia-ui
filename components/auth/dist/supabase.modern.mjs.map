{"version":3,"file":"supabase.modern.mjs","sources":["../src/services/supabase.ts"],"sourcesContent":["import {\n  AuthParams,\n  AuthOptions,\n  AuthStateChangeCallback,\n  AuthProviderProps,\n} from '../'\n\nimport type {\n  AuthChangeEvent,\n  AuthResponse,\n  OAuthResponse,\n  Provider,\n  Session,\n  User,\n  SupabaseClient,\n  VerifyEmailOtpParams,\n  VerifyMobileOtpParams,\n} from '@supabase/supabase-js'\n\ninterface RecoveryParams {\n  access_token?: string\n  refresh_token?: string\n  expires_in?: string\n  token_type?: string\n  type?: string\n}\n\ninterface OtpParams extends AuthParams {\n  otp: string\n}\n\nconst getParams = (): RecoveryParams => {\n  const hash = window.location.hash.replace('#', '')\n  return hash.split('&').reduce<any>((memo, part) => {\n    const [key, value] = part.split('=')\n    memo[key] = value\n    return memo\n  }, {})\n}\n\ninterface SupabaseServiceAuthOptions {\n  loginOptions?: {\n    data?: object\n    /** A URL to send the user to after they are confirmed. */\n    redirectTo?: string\n    /** A space-separated list of scopes granted to the OAuth application. */\n    scopes?: string\n    /** An object of query params */\n    queryParams?: { [key: string]: string }\n\n    /** Verification token received when the user completes the captcha on the site. */\n    captchaToken?: string\n    /** The redirect url embedded in the email link */\n    emailRedirectTo?: string\n    /** If set to false, this method will not create a new user. Defaults to true. */\n    shouldCreateUser?: boolean\n  }\n  signupOptions?: {\n    emailRedirectTo?: string\n    /**\n     * A custom data object to store the user's metadata. This maps to the `auth.users.user_metadata` column.\n     *\n     * The `data` should be a JSON object that includes user-specific info, such as their first and last name.\n     */\n    data?: object\n    /** Verification token received when the user completes the captcha on the site. */\n    captchaToken?: string\n  }\n  verifyOptions?: {\n    /** A URL to send the user to after they are confirmed. */\n    redirectTo?: string\n    /** Verification token received when the user completes the captcha on the site. */\n    captchaToken?: string\n  }\n  resetPasswordOptions?: {\n    redirectTo?: string\n    captchaToken?: string\n  }\n}\n\nexport const createAuthService = (\n  supabase: SupabaseClient<any, 'public', any>,\n  serviceOptions?: SupabaseServiceAuthOptions\n): AuthProviderProps<User> => {\n  const onLogin = async (\n    params: AuthParams,\n    authOptions?: AuthOptions<{ data?: object; captchaToken?: string }>\n  ) => {\n    const options = {\n      ...serviceOptions?.loginOptions,\n      ...authOptions,\n    }\n    function authenticate() {\n      const { email, password, provider, phone } = params\n      if (email && password) {\n        return supabase.auth.signInWithPassword({\n          email,\n          password,\n          options,\n        })\n      } else if (email) {\n        return supabase.auth.signInWithOtp({ email, options })\n      } else if (provider) {\n        return supabase.auth.signInWithOAuth({\n          provider: provider as Provider,\n          options,\n        })\n      } else if (phone && password) {\n        return supabase.auth.signInWithPassword({ phone, password, options })\n      } else if (phone) {\n        return supabase.auth.signInWithOtp({ phone, options })\n      }\n      throw new Error('Could not find correct authentication method')\n    }\n    const resp = await authenticate()\n\n    if (resp.error) {\n      throw resp.error\n    }\n    if (isOauthResponse(resp)) {\n      const userResp = await supabase.auth.getUser()\n      if (userResp.error) {\n        throw userResp.error\n      }\n      return userResp.data.user\n    }\n    return resp.data.user\n  }\n\n  const onSignup = async (\n    params: AuthParams,\n    authOptions?: AuthOptions<{\n      captchaToken?: string\n      emailRedirectTo?: string\n      data?: object\n    }>\n  ) => {\n    async function signup() {\n      const { email, phone, password } = params\n      const options = {\n        ...serviceOptions?.signupOptions,\n        ...authOptions,\n      }\n      if (email && password) {\n        return await supabase.auth.signUp({\n          email,\n          password,\n          options,\n        })\n      } else if (phone && password) {\n        return await supabase.auth.signUp({\n          phone,\n          password,\n          options,\n        })\n      } else if (email) {\n        return supabase.auth.signInWithOtp({ email, options })\n      } else if (phone) {\n        return supabase.auth.signInWithOtp({ phone, options })\n      }\n    }\n\n    const resp = await signup()\n\n    if (resp?.error) {\n      throw resp.error\n    }\n\n    return resp?.data.user\n  }\n\n  const onVerifyOtp = async (\n    params: OtpParams,\n    options?: AuthOptions<{ captchaToken?: string }>\n  ) => {\n    const { email, phone, otp, type } = params\n\n    if (email) {\n      const verify: VerifyEmailOtpParams = {\n        email,\n        token: otp,\n        type: type || 'signup',\n        options: {\n          ...serviceOptions?.verifyOptions,\n          ...options,\n        },\n      }\n      const resp = await supabase.auth.verifyOtp(verify)\n      if (resp.error) {\n        throw resp.error\n      }\n      return Boolean(resp.data.session)\n    }\n\n    if (phone) {\n      const verify: VerifyMobileOtpParams = {\n        phone,\n        token: otp,\n        type: type || 'sms',\n        options: {\n          ...serviceOptions?.verifyOptions,\n          ...options,\n        },\n      }\n      const resp = await supabase.auth.verifyOtp(verify)\n      if (resp.error) {\n        throw resp.error\n      }\n      return Boolean(resp.data.session)\n    }\n\n    throw new Error('You need to provide either email or phone')\n  }\n\n  const onLogout = async () => {\n    return await supabase.auth.signOut()\n  }\n\n  const onAuthStateChange = (callback: AuthStateChangeCallback<User>) => {\n    const { data } = supabase.auth.onAuthStateChange(\n      (event: AuthChangeEvent, session: Session | null) => {\n        callback(session?.user)\n      }\n    )\n\n    return () => data?.subscription.unsubscribe()\n  }\n\n  const onLoadUser = async () => {\n    const { data, error } = await supabase.auth.getUser()\n    if (error) {\n      throw error\n    }\n    return data.user\n  }\n\n  const onGetToken = async () => {\n    const { data, error } = await supabase.auth.getSession()\n    if (error) {\n      throw error\n    }\n    return data.session?.access_token || null\n  }\n\n  const onResetPassword = async (\n    { email }: Required<Pick<AuthParams, 'email'>>,\n    options?: AuthOptions\n  ) => {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      ...serviceOptions?.resetPasswordOptions,\n      ...options,\n    })\n    if (error) {\n      throw error\n    }\n  }\n\n  const onUpdatePassword = async ({\n    password,\n  }: Required<Pick<AuthParams, 'password'>>) => {\n    const params = getParams()\n\n    if (params?.type === 'recovery') {\n      const { error } = await supabase.auth.updateUser({\n        password,\n      })\n      if (error) {\n        throw error\n      }\n    }\n  }\n\n  return {\n    onLogin,\n    onSignup,\n    onVerifyOtp,\n    onLogout,\n    onAuthStateChange,\n    onLoadUser,\n    onGetToken,\n    onResetPassword,\n    onUpdatePassword,\n  }\n}\n\nfunction isOauthResponse(\n  response: AuthResponse | OAuthResponse\n): response is OAuthResponse {\n  return Boolean((response as OAuthResponse).data?.provider)\n}\n"],"names":["createAuthService","supabase","serviceOptions","onLogin","async","params","authOptions","options","_extends","loginOptions","resp","email","password","provider","phone","auth","signInWithPassword","signInWithOtp","signInWithOAuth","Error","authenticate","error","Boolean","response","data","_response$data","userResp","getUser","user","onSignup","signupOptions","signUp","signup","onVerifyOtp","otp","type","token","verifyOptions","verifyOtp","verify","session","onLogout","signOut","onAuthStateChange","callback","event","subscription","unsubscribe","onLoadUser","onGetToken","_data$session","getSession","access_token","onResetPassword","resetPasswordForEmail","resetPasswordOptions","onUpdatePassword","window","location","hash","replace","split","reduce","memo","part","key","value","updateUser"],"mappings":"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"}